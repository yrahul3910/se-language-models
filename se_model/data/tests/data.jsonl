[3758880, ["> **Fun fact:** The original snippet posted here was the most copied Java snippet of all time on Stack Overflow, and it was flawed. It was fixed, but it got messy.\n>\n> Full story in this article: [The most copied Stack Overflow snippet of all time is flawed!][1]\nSource: [Formatting byte size to human readable format | Programming.Guide][2]\n# SI (1 k = 1,000)", "# Binary (1 Ki = 1,024)", "# Example output:", "  [1]: https://programming.guide/worlds-most-copied-so-snippet.html\n  [2]: http://programming.guide/java/formatting-byte-size-to-human-readable-format.html"]]
[9875710, ["I have a nice jQuery Extension perfect for this type of thing at this gist:\n> https://gist.github.com/2206057\nTo use it just do something like:", "also ", "should also mention, if you submit multiple elements like `$(\"#eleID1, .elementsWiththisClass\")` for \"position\" and \"isHover\" then it will return an `Array` containing objects like:"]]
[326440, ["Read all text from a file\n-------------------------\nJava 11 added the [readString()][1] method to read small files as a `String`, preserving line terminators:", "For versions between Java 7 and 11, here's a compact, robust idiom, wrapped up in a utility method:", "Read lines of text from a file\n------------------------------\nJava 7 added a [convenience method to read a file as lines of text,][2] represented as a `List<String>`. This approach is \"lossy\" because the line separators are stripped from the end of each line.", "Java 8 added the [`Files.lines()`][3] method to produce a `Stream<String>`. Again, this method is lossy because line separators are stripped. If an `IOException` is encountered while reading the file, it is wrapped in an [`UncheckedIOException`][4], since `Stream` doesn't accept lambdas that throw checked exceptions.", "This `Stream` does need a [`close()`][5] call; this is poorly documented on the API, and I suspect many people don't even notice `Stream` has a `close()` method. Be sure to use an ARM-block as shown.\nIf you are working with a source other than a file, you can use the [`lines()`][6] method in `BufferedReader` instead.\nMemory utilization\n------------------\nThe first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.\nThe second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.\nFor reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, \"large\" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM. The third method, using a `Stream<String>` is one way to do this, if your input \"records\" happen to be individual lines. (Using the `readLine()` method of `BufferedReader` is the procedural equivalent to this approach.)\nCharacter encoding\n------------------\nOne thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.\nThe [`StandardCharsets`][7] class defines some constants for the encodings required of all Java runtimes:", "The platform default is available from [the `Charset` class][8] itself:", "---\nNote: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the \"edited\" link on this answer.\n  [1]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#readString(java.nio.file.Path,java.nio.charset.Charset)\n  [2]: https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29\n  [3]: https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#lines-java.nio.file.Path-java.nio.charset.Charset-\n  [4]: https://docs.oracle.com/javase/8/docs/api/java/io/UncheckedIOException.html\n  [5]: https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#close--\n  [6]: https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html#lines--\n  [7]: https://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html\n  [8]: https://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29"]]
